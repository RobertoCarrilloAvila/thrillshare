require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/orders", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:order, school_id: create(:school).id, 
                            gifts: [{kind: "mug"},{kind: "tshirt", size: "mediana"}])
  }

  let(:invalid_attributes) {
    attributes_for(:order, school_id: create(:school).id,
                            gifts: [{kind: "hoodie", size: nil},{kind: "tshirt", size: nil}])
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # OrdersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /show" do
    it "renders a successful response" do
      valid_attributes["gifts_attributes"] = valid_attributes.delete(:gifts)
      order = Order.create! valid_attributes
      get order_url(id: order.school_id), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Order" do
        expect {
          post orders_url,
               params: { order: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Order, :count).by(1)
      end

      it "renders a JSON response with the new order" do
        post orders_url,
             params: { order: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Order" do
        expect {
          post orders_url,
               params: { order: invalid_attributes }, as: :json
        }.to change(Order, :count).by(0)
      end

      it "renders a JSON response with errors for the new order" do
        post orders_url,
             params: { order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        build(:order, status: "processing", gifts: [build(:gift, kind: 'sticker')]).as_json(only: [:status], include: {gifts: {only: [:id, :kind, :size]}})
      }

      it "updates the requested order" do
        valid_attributes["gifts_attributes"] = valid_attributes.delete(:gifts)
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: new_attributes }, headers: valid_headers, as: :json
        order.reload
        expect(order.status).to eq("processing")
      end

      it "renders a JSON response with the order" do
        valid_attributes["gifts_attributes"] = valid_attributes.delete(:gifts)
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the order" do
        valid_attributes["gifts_attributes"] = valid_attributes.delete(:gifts)
        order = Order.create! valid_attributes
        patch order_url(order),
              params: { order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "POST /cancel" do
    it "cancel the requested order" do
      order = Order.first
      post cancel_order_url(order), headers: valid_headers, as: :json
      order.reload
      expect(order.status).to eq("cancelled")
    end
  end
end
